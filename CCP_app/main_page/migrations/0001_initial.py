# Generated by Django 3.2.23 on 2024-01-29 07:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("birthdate", models.DateField(blank=True, null=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PL", "Polska"),
                            ("CZ", "Czech Republic"),
                            ("SK", "Slovakia"),
                            ("UA", "Ukraine"),
                            ("SE", "Sweden"),
                            ("DK", "Denmark"),
                            ("FI", "Finland"),
                            ("NO", "Norway"),
                            ("GB", "Great Britain"),
                            ("DE", "Germany"),
                            ("NL", "Netherlands"),
                            ("FR", "France"),
                            ("CH", "Switzerland"),
                            ("BE", "Belgium"),
                            ("AT", "Austria"),
                            ("IT", "Italy"),
                            ("ES", "Spain"),
                            ("PT", "Portugal"),
                            ("IE", "Ireland"),
                            ("SI", "Slovenia"),
                            ("HU", "Hungary"),
                            ("USA", "USA"),
                            ("CA", "Canada"),
                            ("AU", "Australia"),
                            ("NZ", "New Zealand"),
                        ],
                        max_length=20,
                    ),
                ),
                ("town", models.CharField(blank=True, max_length=100, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "registration_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("MI", "Miłośnik"),
                            ("HP", "Hodowca Polski"),
                            ("HZ", "Hodowca Zagraniczny"),
                            ("WZ", "Wystawca Zagraniczny"),
                            ("WD", "Wystawca standardu D"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "club",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PL", "Polska (CCP)"),
                            ("PET", "Wystawca standardu D - Brak klubu"),
                            ("SOCHM", "Czech Republic (SOCHM)"),
                            ("SZOCHVM", "Czech Republic (SZOCHVM)"),
                            ("SK", "Slovakia"),
                            ("UA", "Ukraine"),
                            ("SE", "Sweden"),
                            ("DMK", "Denmark (DMK)"),
                            ("DMF", "Denmark (DMF)"),
                            ("FI", "Finland"),
                            ("NMK", "Norway (NMK)"),
                            ("NMF", "Norway (NMF)"),
                            ("GB", "Great Britain"),
                            ("MFD", "Germany (MFD)"),
                            ("OMNC", "Germany (OMNC)"),
                            ("NL", "Netherlands"),
                            ("FAEC", "France (FAEC)"),
                            ("CCF", "France (CCF)"),
                            ("CH", "Switzerland"),
                            ("BE", "Belgium"),
                            ("AT", "Austria"),
                            ("IT", "Italy"),
                            ("ES", "Spain"),
                            ("PT", "Portugal"),
                            ("IE", "Ireland"),
                            ("SI", "Slovenia"),
                            ("HU", "Hungary"),
                            ("USA", "USA"),
                            ("CA", "Canada"),
                            ("AU", "Australia"),
                            ("NZ", "New Zealand"),
                        ],
                        max_length=10,
                    ),
                ),
                ("questionnaire", models.TextField(default="")),
                ("last_edit_date", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Bob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Breed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
                ("polish_name", models.CharField(max_length=150, unique=True)),
                (
                    "standard",
                    models.CharField(
                        choices=[("A", "A"), ("B", "B"), ("C", "C"), ("D", "D")],
                        max_length=2,
                    ),
                ),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Breeding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("nickname", models.CharField(max_length=100)),
                (
                    "name_position",
                    models.CharField(
                        choices=[("before", "Before"), ("after", "After")],
                        default="after",
                        max_length=10,
                    ),
                ),
                ("purpose", models.TextField()),
                ("www", models.CharField(blank=True, max_length=200, null=True)),
                ("fb", models.CharField(blank=True, max_length=200, null=True)),
                ("banner", models.ImageField(blank=True, null=True, upload_to="news/")),
                ("date_of_join", models.DateField(auto_now_add=True)),
                ("date_of_acceptance", models.DateField(blank=True, null=True)),
                (
                    "registration_number",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Oczekująca"),
                            ("active", "Aktywna"),
                            ("inactive", "Nieaktywna"),
                            ("kicked", "Usunięta dyscyplinarnie"),
                        ],
                        default="waiting",
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=False)),
                (
                    "breeds",
                    models.ManyToManyField(
                        related_name="BREEDING_breeds", to="main_page.Breed"
                    ),
                ),
                (
                    "contact_breeder",
                    models.ManyToManyField(
                        related_name="BREEDING_contact_breeder",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        related_name="BREEDING_owners", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Color",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
                ("position", models.CharField(max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name="Exhibition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("normal", "normal"), ("ee", "ee")],
                        default="normal",
                        max_length=255,
                    ),
                ),
                ("fees", models.CharField(max_length=255, null=True)),
                (
                    "banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="ehxibitions/baners/"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EyeColor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, unique=True)),
                ("polish_name", models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name="Judge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=100, null=True)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=5)),
                ("town", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "judge_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=25, null=True),
                ),
                ("email", models.EmailField(max_length=254)),
                ("license", models.CharField(blank=True, max_length=255, null=True)),
                ("judging_in", models.TextField(blank=True, null=True)),
                ("languages", models.TextField(blank=True, null=True)),
                ("standard_a", models.CharField(blank=True, max_length=5, null=True)),
                ("standard_b", models.CharField(blank=True, max_length=5, null=True)),
                ("standard_c", models.CharField(blank=True, max_length=5, null=True)),
                ("standard_d", models.CharField(blank=True, max_length=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Litter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("birthdate", models.DateField(blank=True, null=True)),
                ("number_of_male", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "number_of_female",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "breeding",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="LITTER_breeding",
                        to="main_page.breeding",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("first_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("content", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("reply_sent", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="News",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200, null=True)),
                ("content", models.TextField()),
                ("photo", models.ImageField(blank=True, null=True, upload_to="news/")),
                ("creation_date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Pig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150)),
                ("nickname", models.CharField(blank=True, max_length=150)),
                (
                    "sex",
                    models.CharField(
                        choices=[("Male", "Samiec"), ("Female", "Samica")],
                        default="Samiec",
                        max_length=6,
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("birth_weight", models.PositiveIntegerField(blank=True, null=True)),
                ("breeder", models.CharField(blank=True, max_length=255, null=True)),
                ("colors", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "registration_number",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="zdjecia_swinek/zdjecia_uzytkownikow",
                    ),
                ),
                (
                    "nickname_position",
                    models.CharField(
                        blank=True,
                        choices=[("Before", "Before"), ("After", "After")],
                        default="After",
                        max_length=6,
                        null=True,
                    ),
                ),
                ("is_in_breeding", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=False)),
                (
                    "breed",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_page.breed",
                    ),
                ),
                (
                    "eye_color",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="main_page.eyecolor",
                    ),
                ),
                (
                    "father",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        limit_choices_to={"sex": "Male"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="PIG_father",
                        to="main_page.pig",
                    ),
                ),
                (
                    "litter",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="PIG_litter",
                        to="main_page.litter",
                    ),
                ),
                (
                    "mother",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        limit_choices_to={"sex": "Female"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="PIG_mother",
                        to="main_page.pig",
                    ),
                ),
                (
                    "owner",
                    models.ManyToManyField(
                        blank=True,
                        default=None,
                        related_name="PIG_owner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Winners",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "best_in_show_adult_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISA1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_adult_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISA2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_adult_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISA3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_b_c_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISBC1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_b_c_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISBC2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_b_c_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISBC3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_baby_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISB1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_baby_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISB2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_baby_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISB3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_junior_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISJ1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_junior_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISJ2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_junior_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISJ3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_senior_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISS1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_senior_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISS2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_in_show_senior_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BISS3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_of_best_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BOB1",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_of_best_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BOB2",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_of_best_3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_BOB3",
                        to="main_page.pig",
                    ),
                ),
                (
                    "best_of_breed",
                    models.ManyToManyField(
                        blank=True, related_name="Winners_bob", to="main_page.Bob"
                    ),
                ),
                (
                    "exhibition_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_exhibition",
                        to="main_page.exhibition",
                    ),
                ),
                (
                    "pwcc_winner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_PWCC",
                        to="main_page.pig",
                    ),
                ),
                (
                    "pwsc_winner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Winners_PWSS",
                        to="main_page.pig",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("catalog_number", models.PositiveIntegerField(blank=True, null=True)),
                ("type_build", models.TextField(blank=True, null=True)),
                ("head_eyes_ears", models.TextField(blank=True, null=True)),
                ("coat", models.TextField(blank=True, null=True)),
                ("breed_specificity", models.TextField(blank=True, null=True)),
                ("color_specificity", models.TextField(blank=True, null=True)),
                ("condition", models.TextField(blank=True, null=True)),
                ("notice", models.TextField(blank=True, null=True)),
                (
                    "pig_rating",
                    models.CharField(
                        choices=[
                            ("", ""),
                            ("Dyskwalifikacja", "DSF"),
                            ("Dostateczna", "N-B"),
                            ("Dobra", "G"),
                            ("Bardzo dobra", "SG"),
                            ("Doskonała", "HV"),
                            ("Wybitna", "V"),
                        ],
                        default="",
                        max_length=50,
                    ),
                ),
                (
                    "cac",
                    models.CharField(
                        choices=[
                            ("", ""),
                            ("BCAC", "BCAC"),
                            ("JCAC", "JCAC"),
                            ("CAC", "CAC"),
                        ],
                        default="",
                        max_length=10,
                    ),
                ),
                (
                    "exhibition_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Rating_exhibition",
                        to="main_page.exhibition",
                    ),
                ),
                (
                    "rating_pig",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Rating_pig",
                        to="main_page.pig",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="litter",
            name="father",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="LITTER_father",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="litter",
            name="mother",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="LITTER_mother",
                to="main_page.pig",
            ),
        ),
        migrations.CreateModel(
            name="ExhibitionGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("normal", "normal"),
                            ("summer", "summer"),
                            ("winter", "winter"),
                        ],
                        default="normal",
                        max_length=255,
                    ),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "exhibitions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="Group_exhibitions",
                        to="main_page.Exhibition",
                    ),
                ),
                (
                    "winner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="Group_winner",
                        to="main_page.pig",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="exhibition",
            name="entries",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Exhibition_pigs",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="exhibition",
            name="judges",
            field=models.ManyToManyField(
                blank=True, related_name="Exhibition_judges", to="main_page.Judge"
            ),
        ),
        migrations.AddField(
            model_name="exhibition",
            name="rating",
            field=models.ManyToManyField(
                blank=True, related_name="Exhibition_rating", to="main_page.Rating"
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="best_of_breed",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_bob",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="best_of_breed_adult",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_boba",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="best_of_breed_baby",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_bobb",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="best_of_breed_junior",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_bobj",
                to="main_page.pig",
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="breed",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_breed",
                to="main_page.breed",
            ),
        ),
        migrations.AddField(
            model_name="bob",
            name="winners_id",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="Bob_winners",
                to="main_page.winners",
            ),
        ),
    ]
